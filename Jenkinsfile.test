@Library('keptn-library')_
def keptn = new sh.keptn.Keptn()

node {
    properties([
        parameters([
         string(defaultValue: '', description: 'Keptn Context ID', name: 'shkeptncontext', trim: false), 
         string(defaultValue: 'qgproject', description: 'Name of your Keptn Project', name: 'Project', trim: false), 
         string(defaultValue: 'qualitystage', description: 'Stage of your Keptn project where tests are triggered in', name: 'Stage', trim: false), 
         string(defaultValue: 'evalservice', description: 'Servicename of the service that is tested', name: 'Service', trim: false),
        ])
    ])

    def commit_id

    stage('Preparation') {
        checkout scm
        sh "git rev-parse --short HEAD > .git/commit-id"                        
        commit_id = readFile('.git/commit-id').trim()
    }

    stage('Initialize Keptn') {
        // Initialize the Keptn Project - ensures the Keptn Project is created with the passed shipyard
        keptn.keptnInit project:"${params.Project}", service:"${params.Service}", stage:"${params.Stage}"
    }

    stage('Test') {
        nodejs(nodeJSInstallationName: 'nodejs') {
        sh 'npm install --only=dev'
        sh 'npm test'
        }
    }

    stage('Send Finished Event Back to Keptn') {
        // Send Finished Event back
        def keptnContext = keptn.sendFinishedEvent eventType: "test", keptnContext:"${params.shkeptncontext}", result:"pass", status:"succeeded"
        String keptn_bridge = env.KEPTN_BRIDGE
        echo "Open Keptns Bridge: ${keptn_bridge}/trace/${keptnContext}"
    }
}